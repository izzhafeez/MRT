import java.util.Optional;

class Node<T extends Comparable<T>> implements Comparable<Node<T>> {
  
  @SuppressWarnings("unchecked")
  private static final Node<? extends Comparable> EMPTY_NODE = new Node<>(null);
  private final T content;
  private int height;
  private Node<T> left;
  private Node<T> right;

  private Node(T content) {
    this.content = content;
    this.height = 0;
    this.left = Node.<T>create(null);
    this.right = Node.<T>create(null);
  }

  public static <T extends Comparable<T>> Node<T> create(T content) {
    if (content == null) {
      @SuppressWarnings("unchecked")
      Node<T> toReturn = (Node<T>) Node.EMPTY_NODE;
      return toReturn;
    }
    return new Node<T>(content);
  }

  public T getContent() {
    return this.content;
  }

  public void incrementHeight() {
    this.height++;
  }

  public int getHeight() {
    return this.height;
  }

  public boolean checkBalanced() {
    return true; 
  }

  @Override
  public int compareTo(Node<T> node) {
    return node.getContent().compareTo(this.content);
  }

  @Override
  public String toString() {
    return String.format("Node (height %d) containing %s", this.height, this.content);
  }

}
